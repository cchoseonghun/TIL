Narrow = 좁은, 제한된이라는 뜻

function 내함수(x :number|string){
    if(typeof x === 'string'){
        return x + '1';
    } else {
        return x + 1;
    }
}
내함수(123);
내함수('123');


이렇게 typeof 와 if문을 이용해 타입에 대해 명확한 제시를 해주는게 Narrowing
그냥 현재 변수의 타입이 뭔지 특정지울 수 있기만 하면 다 인정해줌

Narrowing으로 판정해주는 문법들
- typeof 변수
- 속성명 in 오브젝트자료
- 인스턴스 instanceof 부모


assertion 문법 (타입 덮어쓰기)

function 내함수(x :number|string){
    let array :number[] = [];
    array[0] = x as number;
}
// if문이 필요없어짐

assertion 문법의 용도
1. Narrowing 할 때 쓴다. 
1-1. as 문법은 타입을 확정 지을 때 쓰는 문법이랬지 a에서 b로 변경하는게 아님
1-2. 잘못된 예) let 이름 :string = 'kim'; 이름 as number;
2. 무슨 타입이 들어올지 100% 확실할 때 쓴다.
2-1. 위 내함수()에 대해 내함수('123') 넣어도 아무일 없음. assertion 해놓으면 이런 버그 캐치못함
3. 남이 짠 코드 수정할 때 왜 타입에러가 나는지 모르겠을 때. 비상용으로 써보도록

예전 as 문법은
<number>이름
이렇게 썼는데 react 에서 HTML 태그랑 비슷해보여서 as 키워드만 씀
