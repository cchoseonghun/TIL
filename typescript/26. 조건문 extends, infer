type Age<T> = T;
let a :Age<string>
<> 이건 일반 타입변수에도 사용가능


1. type if문은 삼항연산자로
type Age<T> = 조건식 ? string : unknown

2. 조건식은 extends 써야함
type Age<T> = T extends string ? string : unknown
let a :Age<string>  // a의 타입은 string
let a2 :Age<number>  // a2의 타입은 unknown



// infer 키워드
조건문에서 쓸 수 있는 infer 키워드
- 타입을 왼쪽에서 추출한다.

예시 1) (실용성 없지만)
type 타입추출<T> =  T extends infer R ? R : unknown
type a = 타입추출<string>

예시 2) array 내부의 타입만 뽑기
type 타입추출<T> =  T extends (infer R)[] ? R : unknown
type a = 타입추출<string[]>  // a의 타입은 string

예시 3) 함수를 넣으면 함수의 return 타입만 뽑기
type 타입추출<T> =  T extends ( () => infer R ) ? R : unknown
type a = 타입추출< () => void >  // a의 타입은 void



예시 3의 경우 이미 만들어져 있는 함수를 이용하면 됨
type b = ReturnType<()=>void>



예제) 
Q. 그럼 파라미터로 array 자료를 입력하면 array의 첫 자료의 타입을 그대로 남겨주고,
array 자료가 아니라 다른걸 입력하면 any 타입을 남겨주는 타입은 어떻게 만들면 될까요?

type FirstItem<T> = T extends any[] ? T[0] : any
let age1 :FirstItem<string[]>;
let age2 :FirstItem<number>; 

Q. array의 첫 자료가 string이면 string 타입을 그대로 남겨주고
array의 첫 자료가 string이 아니면 unknown을 남겨주려면?

type Age<T> = T extends [string, ...any] ? T[0] : unknown;
let age1 :Age<[string, number]>;
let age2 :Age<[boolean, number]>; 

Q. 함수의 파라미터의 타입을 뽑아주는 기계를 만들어보십시오.

type 타입뽑기<T> = T extends (x :infer R) => any ? R : any;
type a = 타입뽑기<(x :number) => void> //이러면 number가 이 자리에 남음
type b = 타입뽑기<(x :string) => void> //이러면 string이 이 자리에 남음
