function 함수(x :unknown[]){
    return x[0]
}
let a = 함수([4, 2]);  // a의 타입은 unknown
console.log(a);

// console.log(a + 1); // 하고싶은데 어떻게 함?

// 해결책
// 1. 여기서 narrowing 하거나 as 쓰거나 
// 2. Generic 함수 만들기 (파라미터로 타입을 입력하는 함수)

function 함수2<MyType>(x :MyType[]) :MyType{
    return x[0];
}
let b = 함수2<number>([4, 2]);
console.log(b + 1);
let c = 함수2<string>(['4', '2']);
console.log(c)

(참고)타입파라미터가 자동으로 유추하기도 함



function 함수<MyType>(x :MyType){
    return x - 1;
}
// let a = 함수<number>(100);  
// 얘로는 에러 안나지만
// 없다면 위에서 x가 뭔지 알고 x - 1을 실행할 수 있는지?
// 그래서 에러 나는듯

타입파라미터 제한두기
function 함수<MyType extends number>(x :MyType){
    return x - 1;
}
let a = 함수<number>(100);

// 커스텀 타입으로도 타입파라미터 제한 가능
interface LengthCheck {
    length : number
}
function 함수<MyType extends LengthCheck>(x :MyType){
    return x.length;
}
let a = 함수<string[]>(['100']);

1. 함수에 타입파라미터 넣을 수 있음
2. extends 키워드로 넣을 수 있는 타입 제한가능
3. class에도 타입파라미터 넣을 수 있음
