풀면서 생긴 상황

1. 최저등수 초기값 설정
0개 맞은 경우와 1개 맞은 경우가 6등, 2개 5등, 3개 4등 ... 
이렇게 됐기 때문에 최저등수 변수 low 의 초기값을 6에서 7로 변경 후 
lottos와 win_nums 배열에 서로 같은 원소가 있을때마다 low(최저등수)를 -1 해주는식으로
마지막에 low가 7인 경우만 if문으로 체크해서 6으로 만들어줬다.

2. 달라진 배열의 대한 for문
win_nums의 for문 안에 lottos의 for문을 넣어 
같은수가 있으면 해당 수의 인덱스를 각각 없애게끔 했는데
한싸이클을 건너뛰는 현상이 발생하여 
a:for(let x=win_nums.length-1;x>-1;x--){
        for(let y=0;y<lottos.length;y++){
와 같은 방식으로 뒤에서부터 돌게끔 변경

3. 최고등수 6, 최저등수 6인 경우 고려 x
[6, 6]일 경우를 고려하지 못해 결과가 [7, 6]이 나오고 있는 경우가 있었다.
    if(high == 7) high -= 1;
을 통해 해결



--

let lottos 
// = [44, 1, 0, 0, 31, 25];
// = [0, 0, 0, 0, 0, 0];
// = [45, 4, 35, 20, 3, 9];
= [2, 5, 8, 34, 44, 19];

let win_nums 
// = [31, 10, 45, 1, 6, 19];
// = [38, 19, 20, 40, 15, 25];
= [20, 9, 3, 45, 4, 35];

function solution(lottos, win_nums){
    var answer = [];
    let high = 1;
    let low = 7;

    lottos = lottos.sort((a,b)=>a-b);
    win_nums = win_nums.sort((a,b)=>a-b);

    a:for(let x=win_nums.length-1;x>-1;x--){
        for(let y=0;y<lottos.length;y++){
            if(win_nums[x] == lottos[y]){
                win_nums.splice(x, 1);
                lottos.splice(y, 1);
                low -= 1;
                continue a;
            }
        }
    }

    lottos.forEach((elem)=>{
        if(elem != 0){
            high += 1;
        }
    })

    if(high == 7) high -= 1;
    if(low == 7) low -= 1;
    answer = [high, low];

    console.log(answer)

    return answer;
}

solution(lottos, win_nums);
